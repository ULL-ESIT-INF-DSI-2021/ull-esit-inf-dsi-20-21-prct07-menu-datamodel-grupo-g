{"version":3,"file":"/home/usuario/prct07-menu-datamodel-grupo-g/src/Platos.ts","sources":["/home/usuario/prct07-menu-datamodel-grupo-g/src/Platos.ts"],"names":[],"mappings":";;;AAKA,MAAa,KAAK;IAEhB,YAAoB,IAAY,EAAW,IAAuB,EAAU,QAAkB;QAA1E,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAmB;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAC9F,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,SAAS;QACP,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;SAChC;IACH,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,cAAc;QACZ,IAAI,SAAS,GAAG,IAAI,GAAG,EAAiB,CAAA;QACxC,IAAI,SAAS,GAAW,CAAC,CAAC;QAC1B,IAAI,QAAQ,GAAW,CAAC,CAAC;QACzB,IAAI,OAAO,GAAW,CAAC,CAAC;QACxB,IAAI,IAAI,GAAW,CAAC,CAAC;QACrB,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YACvB,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,GAAC,GAAG,CAAC;YAC1B,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC,CAAC;YAC1D,QAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC,CAAC;YACxD,OAAO,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,UAAU,CAAC,CAAC;YACpD,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,CAAA;SAC5C;QAED,SAAS,CAAC,GAAG,CAAC,UAAU,EAAC,QAAQ,CAAC,CAAC;QACnC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAC,SAAS,CAAC,CAAC;QACrC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAC,OAAO,CAAC,CAAC;QACjC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;QAE3B,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,cAAc;QACZ,cAAc;QAEd,OAAO,CAAC,CAAA;IACV,CAAC;IAED,SAAS;QACP,IAAI,SAAS,GAAa,EAAE,CAAA;QAC5B,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAC;YACtB,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;SAChC;QACD,OAAO,SAAS,CAAA;IAClB,CAAC;CAEF;AA3DD,sBA2DC","sourcesContent":["import {Food} from './Food'\nimport * as food from './list_food'\n\ntype Category = \"Entrante\" | \"Primer Plato\" | \"Segundo Plato\" | \"Postre\"\n\nexport class Plate {\n  \n  constructor(private name: string,  private food: Map<Food, number>, private category: Category){\n  }\n\n  getName() {\n    return this.name;\n  }\n  \n  getFood() {\n    return this.food;\n  }\n\n  printFood() {\n    for (let food of this.food) {\n      console.log(food[0].getName());\n    } \n  }\n\n  getCategory() {\n    return this.category;\n  }\n\n  getNutritional() { \n    let resultado = new Map<string,number>()\n    let proteinas: number = 0;\n    let hidratos: number = 0;\n    let lípidos: number = 0;\n    let kcal: number = 0;\n    for (let i of this.food) {\n      let multiplier = i[1]/100;\n      proteinas = proteinas + (i[0].getProteins() * multiplier);\n      hidratos = hidratos + (i[0].getHydrates() * multiplier);\n      lípidos = lípidos + (i[0].getLipids() * multiplier);\n      kcal = kcal + (i[0].getKcal() * multiplier)\n    }\n    \n    resultado.set(\"Hidratos\",hidratos);\n    resultado.set(\"Proteinas\",proteinas);\n    resultado.set(\"Lípidos\",lípidos);\n    resultado.set(\"Kcal\", kcal)\n\n    return resultado;\n  }\n  \n  priceGenerator() { //calcular el precio del plato según los alimentos que tenga y su proporcion\n    //let price = \n\n    return 5\n  }\n\n  getGroups() {\n    let resultado: string[] = []\n    for (let i of this.food){\n      resultado.push(i[0].getGroup())\n    }\n    return resultado\n  }\n\n}\n"]}