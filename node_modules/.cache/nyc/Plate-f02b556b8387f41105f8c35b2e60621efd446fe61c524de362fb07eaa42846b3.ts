"use strict";function cov_1k3mtib8yv(){var path="/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts";var hash="aa589de4cde619c6719dc308b25264e6543080c9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:23}},"2":{start:{line:16,column:8},end:{line:16,column:25}},"3":{start:{line:17,column:8},end:{line:17,column:25}},"4":{start:{line:18,column:8},end:{line:18,column:33}},"5":{start:{line:21,column:8},end:{line:21,column:25}},"6":{start:{line:24,column:8},end:{line:24,column:25}},"7":{start:{line:27,column:8},end:{line:27,column:29}},"8":{start:{line:33,column:18},end:{line:33,column:20}},"9":{start:{line:34,column:8},end:{line:34,column:22}},"10":{start:{line:35,column:8},end:{line:35,column:58}},"11":{start:{line:36,column:8},end:{line:39,column:9}},"12":{start:{line:37,column:12},end:{line:37,column:37}},"13":{start:{line:38,column:12},end:{line:38,column:24}},"14":{start:{line:40,column:8},end:{line:40,column:43}},"15":{start:{line:41,column:8},end:{line:41,column:49}},"16":{start:{line:42,column:8},end:{line:42,column:32}},"17":{start:{line:43,column:8},end:{line:43,column:75}},"18":{start:{line:44,column:8},end:{line:44,column:22}},"19":{start:{line:56,column:24},end:{line:56,column:33}},"20":{start:{line:57,column:24},end:{line:57,column:25}},"21":{start:{line:58,column:23},end:{line:58,column:24}},"22":{start:{line:59,column:22},end:{line:59,column:23}},"23":{start:{line:60,column:19},end:{line:60,column:20}},"24":{start:{line:61,column:8},end:{line:67,column:9}},"25":{start:{line:62,column:29},end:{line:62,column:39}},"26":{start:{line:63,column:12},end:{line:63,column:70}},"27":{start:{line:64,column:12},end:{line:64,column:68}},"28":{start:{line:65,column:12},end:{line:65,column:64}},"29":{start:{line:66,column:12},end:{line:66,column:56}},"30":{start:{line:68,column:8},end:{line:68,column:44}},"31":{start:{line:69,column:8},end:{line:69,column:46}},"32":{start:{line:70,column:8},end:{line:70,column:42}},"33":{start:{line:71,column:8},end:{line:71,column:36}},"34":{start:{line:72,column:8},end:{line:72,column:25}},"35":{start:{line:78,column:19},end:{line:78,column:40}},"36":{start:{line:79,column:8},end:{line:81,column:9}},"37":{start:{line:80,column:12},end:{line:80,column:62}},"38":{start:{line:90,column:24},end:{line:90,column:25}},"39":{start:{line:91,column:25},end:{line:91,column:26}},"40":{start:{line:92,column:25},end:{line:92,column:26}},"41":{start:{line:93,column:8},end:{line:97,column:9}},"42":{start:{line:94,column:12},end:{line:94,column:40}},"43":{start:{line:95,column:12},end:{line:95,column:30}},"44":{start:{line:96,column:12},end:{line:96,column:58}},"45":{start:{line:98,column:8},end:{line:98,column:24}},"46":{start:{line:99,column:8},end:{line:99,column:26}},"47":{start:{line:106,column:24},end:{line:106,column:26}},"48":{start:{line:107,column:8},end:{line:109,column:9}},"49":{start:{line:108,column:12},end:{line:108,column:44}},"50":{start:{line:110,column:8},end:{line:110,column:25}},"51":{start:{line:113,column:0},end:{line:113,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:4},end:{line:15,column:5}},loc:{start:{line:15,column:38},end:{line:19,column:5}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:14},end:{line:22,column:5}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:14},end:{line:25,column:5}},line:23},"3":{name:"(anonymous_3)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:18},end:{line:28,column:5}},line:26},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:16},end:{line:45,column:5}},line:32},"5":{name:"(anonymous_5)",decl:{start:{line:55,column:4},end:{line:55,column:5}},loc:{start:{line:55,column:21},end:{line:73,column:5}},line:55},"6":{name:"(anonymous_6)",decl:{start:{line:77,column:4},end:{line:77,column:5}},loc:{start:{line:77,column:23},end:{line:82,column:5}},line:77},"7":{name:"(anonymous_7)",decl:{start:{line:89,column:4},end:{line:89,column:5}},loc:{start:{line:89,column:21},end:{line:100,column:5}},line:89},"8":{name:"(anonymous_8)",decl:{start:{line:105,column:4},end:{line:105,column:5}},loc:{start:{line:105,column:16},end:{line:111,column:5}},line:105}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{},inputSourceMap:{version:3,file:"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts",sources:["/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts"],names:[],mappings:"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",sourcesContent:["import { Food } from './Food'\nimport * as food from './list_food'\nimport * as plates from './list_plates'\n\ntype Category = \"Entrante\" | \"Primer Plato\" | \"Segundo Plato\" | \"Postre\"\n\nexport class Plate {\n  /**\n   * Clase Plate, se encarga de crear los distintos platos (formados por las variables indicadas\n   * aqu\xED) y de hacer los c\xE1lculos de cantidades y precios de cada uno de ellos.\n   * @param name Nombre del plato\n   * @param food Variable de tipo Map que almacena un objeto de tipo Food que contendr\xE1 los alimentos por los \n   * cuales esta formado el plato y un number que ser\xE1 la cantidad (en gramos) de cada uno de esos alimentos \n   * que utilizamos.\n   * @param category Tipo de plato al que nos referimos: entrante, primer plato... de un tipo de dato que contiene\n   * la informaci\xF3n en distintas cadenas.\n   */\n  constructor(public name: string,  private food: Map<Food, number>, private category: Category) {\n  }\n  \n  getName() {\n    return this.name;\n  }\n  \n  getFood() {\n    return this.food;\n  }\n\n  getCategory() {\n    return this.category;\n  }\n\n  /**\n   * M\xE9todo de impresion printFood(), se encarga de estructurar y escribir la informaci\xF3n por pantalla de un plato.\n   */\n  printFood() {\n    let aux: string = \"\";\n    console.log();\n    console.log(\"Nombre del plato: \", this.getName());\n\n    for (let food of this.food) {\n      aux += food[0].getName();\n      aux += \"  \";\n    }\n    \n    console.log(\"Ingredientes: \", aux);\n    console.log(\"Informaci\xF3n nutricional: \");\n    this.printNutritional();\n    console.log(\"Precio: \" + (this.priceGenerator()).toFixed(2) + \"\u20AC\");\n    console.log(); \n  }\n\n  /**\n   * M\xE9todo getNutricional() encargado de adaptar los valores nutricionales del plato a la cantidad de cada alimento indicada.\n   * El m\xE9todo divide la cantidad indicada en gramos de cada alimento del plato por cien y lo almacena en un multiplicador (ya que los \n   * valores nutricionales indicados en el objeto Food se encuentran por hidratos de carbono, prote\xEDnas y l\xEDpidos por cada 100 gramos \n   * de nuestro alimento). Sumaremos estos valores nutricionales de todos los alimentos para obtener el valor total de cada uno, \n   * para esto multiplicaremos el valor nutricional correspondiente del alimento por nuestro multiplicador.\n   * @returns retorna un Map con el tipo de valor nutricional al que se refiera y un number con el total de ese valor nutricional\n   * de todos los alimentos del plato.\n   */\n  getNutritional() { \n    let resultado = new Map<string,number>()\n    let proteinas: number = 0;\n    let hidratos: number = 0;\n    let l\xEDpidos: number = 0;\n    let kcal: number = 0;\n    for (let i of this.food) {\n      let multiplier = i[1]/100;\n      proteinas = proteinas + (i[0].getProteins() * multiplier);\n      hidratos = hidratos + (i[0].getHydrates() * multiplier);\n      l\xEDpidos = l\xEDpidos + (i[0].getLipids() * multiplier);\n      kcal = kcal + (i[0].getKcal() * multiplier)\n    }\n    \n    resultado.set(\"Hidratos\",hidratos);\n    resultado.set(\"Proteinas\",proteinas);\n    resultado.set(\"L\xEDpidos\",l\xEDpidos);\n    resultado.set(\"Kcal\", kcal)\n\n    return resultado;\n  }\n\n  /**\n   * M\xE9todo printNutritional(), se encarga escribir la informaci\xF3n por pantalla de los valores nutricionales de un plato.\n   */\n  printNutritional() {\n    let info = this.getNutritional()\n    for(let i of info) {\n      console.log(\"  \" + i[0] + \": \" + i[1].toFixed(2))\n    }\n  }\n  \n  /**\n   * M\xE9todo priceGenerator() recoge el precio de cada uno de los alimentos (que se encuentra en \u20AC/kg) y realizaremos una\n   * comparaci\xF3n con el peso del alimento que se utilizara para el plato, multiplicando este por el precio del alimento por kilogramo\n   * y dividiendo este entre mil (para corresponderlo con los gramos, que es la unidad en la que se encuentra el peso de los alimentos)\n   * @returns devuelve el precio total del plato.\n   */\n  priceGenerator() { //calcular el precio del plato seg\xFAn los alimentos que tenga y su proporcion\n    let price1000: number = 0;\n    let foodWeight: number = 0;\n    let totalPrice: number = 0;\n\n    for (let i of this.food) {\n      price1000 = i[0].getPrice();\n      foodWeight = i[1];\n      totalPrice += (foodWeight * price1000)/1000\n    }\n\n    totalPrice += 2; //Precio por mano de obra\n\n    return totalPrice\n  }\n\n  /**\n   * M\xE9todo getGroups() que se encarga de estructurar \n   * @returns \n   */\n  getGroups() {\n    let resultado: string[] = []\n    for (let i of this.food){\n      resultado.push(i[0].getGroup())\n    }\n    return resultado\n  }\n}"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"aa589de4cde619c6719dc308b25264e6543080c9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1k3mtib8yv=function(){return actualCoverage;};}return actualCoverage;}cov_1k3mtib8yv();cov_1k3mtib8yv().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1k3mtib8yv().s[1]++;exports.Plate=void 0;class Plate{/**
     * Clase Plate, se encarga de crear los distintos platos (formados por las variables indicadas
     * aquí) y de hacer los cálculos de cantidades y precios de cada uno de ellos.
     * @param name Nombre del plato
     * @param food Variable de tipo Map que almacena un objeto de tipo Food que contendrá los alimentos por los
     * cuales esta formado el plato y un number que será la cantidad (en gramos) de cada uno de esos alimentos
     * que utilizamos.
     * @param category Tipo de plato al que nos referimos: entrante, primer plato... de un tipo de dato que contiene
     * la información en distintas cadenas.
     */constructor(name,food,category){cov_1k3mtib8yv().f[0]++;cov_1k3mtib8yv().s[2]++;this.name=name;cov_1k3mtib8yv().s[3]++;this.food=food;cov_1k3mtib8yv().s[4]++;this.category=category;}getName(){cov_1k3mtib8yv().f[1]++;cov_1k3mtib8yv().s[5]++;return this.name;}getFood(){cov_1k3mtib8yv().f[2]++;cov_1k3mtib8yv().s[6]++;return this.food;}getCategory(){cov_1k3mtib8yv().f[3]++;cov_1k3mtib8yv().s[7]++;return this.category;}/**
     * Método de impresion printFood(), se encarga de estructurar y escribir la información por pantalla de un plato.
     */printFood(){cov_1k3mtib8yv().f[4]++;let aux=(cov_1k3mtib8yv().s[8]++,"");cov_1k3mtib8yv().s[9]++;console.log();cov_1k3mtib8yv().s[10]++;console.log("Nombre del plato: ",this.getName());cov_1k3mtib8yv().s[11]++;for(let food of this.food){cov_1k3mtib8yv().s[12]++;aux+=food[0].getName();cov_1k3mtib8yv().s[13]++;aux+="  ";}cov_1k3mtib8yv().s[14]++;console.log("Ingredientes: ",aux);cov_1k3mtib8yv().s[15]++;console.log("Información nutricional: ");cov_1k3mtib8yv().s[16]++;this.printNutritional();cov_1k3mtib8yv().s[17]++;console.log("Precio: "+this.priceGenerator().toFixed(2)+"€");cov_1k3mtib8yv().s[18]++;console.log();}/**
     * Método getNutricional() encargado de adaptar los valores nutricionales del plato a la cantidad de cada alimento indicada.
     * El método divide la cantidad indicada en gramos de cada alimento del plato por cien y lo almacena en un multiplicador (ya que los
     * valores nutricionales indicados en el objeto Food se encuentran por hidratos de carbono, proteínas y lípidos por cada 100 gramos
     * de nuestro alimento). Sumaremos estos valores nutricionales de todos los alimentos para obtener el valor total de cada uno,
     * para esto multiplicaremos el valor nutricional correspondiente del alimento por nuestro multiplicador.
     * @returns retorna un Map con el tipo de valor nutricional al que se refiera y un number con el total de ese valor nutricional
     * de todos los alimentos del plato.
     */getNutritional(){cov_1k3mtib8yv().f[5]++;let resultado=(cov_1k3mtib8yv().s[19]++,new Map());let proteinas=(cov_1k3mtib8yv().s[20]++,0);let hidratos=(cov_1k3mtib8yv().s[21]++,0);let lípidos=(cov_1k3mtib8yv().s[22]++,0);let kcal=(cov_1k3mtib8yv().s[23]++,0);cov_1k3mtib8yv().s[24]++;for(let i of this.food){let multiplier=(cov_1k3mtib8yv().s[25]++,i[1]/100);cov_1k3mtib8yv().s[26]++;proteinas=proteinas+i[0].getProteins()*multiplier;cov_1k3mtib8yv().s[27]++;hidratos=hidratos+i[0].getHydrates()*multiplier;cov_1k3mtib8yv().s[28]++;lípidos=lípidos+i[0].getLipids()*multiplier;cov_1k3mtib8yv().s[29]++;kcal=kcal+i[0].getKcal()*multiplier;}cov_1k3mtib8yv().s[30]++;resultado.set("Hidratos",hidratos);cov_1k3mtib8yv().s[31]++;resultado.set("Proteinas",proteinas);cov_1k3mtib8yv().s[32]++;resultado.set("Lípidos",lípidos);cov_1k3mtib8yv().s[33]++;resultado.set("Kcal",kcal);cov_1k3mtib8yv().s[34]++;return resultado;}/**
     * Método printNutritional(), se encarga escribir la información por pantalla de los valores nutricionales de un plato.
     */printNutritional(){cov_1k3mtib8yv().f[6]++;let info=(cov_1k3mtib8yv().s[35]++,this.getNutritional());cov_1k3mtib8yv().s[36]++;for(let i of info){cov_1k3mtib8yv().s[37]++;console.log("  "+i[0]+": "+i[1].toFixed(2));}}/**
     * Método priceGenerator() recoge el precio de cada uno de los alimentos (que se encuentra en €/kg) y realizaremos una
     * comparación con el peso del alimento que se utilizara para el plato, multiplicando este por el precio del alimento por kilogramo
     * y dividiendo este entre mil (para corresponderlo con los gramos, que es la unidad en la que se encuentra el peso de los alimentos)
     * @returns devuelve el precio total del plato.
     */priceGenerator(){cov_1k3mtib8yv().f[7]++;let price1000=(cov_1k3mtib8yv().s[38]++,0);let foodWeight=(cov_1k3mtib8yv().s[39]++,0);let totalPrice=(cov_1k3mtib8yv().s[40]++,0);cov_1k3mtib8yv().s[41]++;for(let i of this.food){cov_1k3mtib8yv().s[42]++;price1000=i[0].getPrice();cov_1k3mtib8yv().s[43]++;foodWeight=i[1];cov_1k3mtib8yv().s[44]++;totalPrice+=foodWeight*price1000/1000;}cov_1k3mtib8yv().s[45]++;totalPrice+=2;//Precio por mano de obra
cov_1k3mtib8yv().s[46]++;return totalPrice;}/**
     * Método getGroups() que se encarga de estructurar
     * @returns
     */getGroups(){cov_1k3mtib8yv().f[8]++;let resultado=(cov_1k3mtib8yv().s[47]++,[]);cov_1k3mtib8yv().s[48]++;for(let i of this.food){cov_1k3mtib8yv().s[49]++;resultado.push(i[0].getGroup());}cov_1k3mtib8yv().s[50]++;return resultado;}}cov_1k3mtib8yv().s[51]++;exports.Plate=Plate;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,