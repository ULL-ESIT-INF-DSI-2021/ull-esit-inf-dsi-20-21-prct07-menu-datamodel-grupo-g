{"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Food.ts":{"path":"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Food.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":25}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":27}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":29}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":33}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":33}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":29}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":27}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"10":{"start":{"line":28,"column":8},"end":{"line":28,"column":26}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":27}},"12":{"start":{"line":34,"column":8},"end":{"line":34,"column":29}},"13":{"start":{"line":37,"column":8},"end":{"line":37,"column":29}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":27}},"15":{"start":{"line":43,"column":8},"end":{"line":43,"column":26}},"16":{"start":{"line":46,"column":8},"end":{"line":46,"column":71}},"17":{"start":{"line":49,"column":8},"end":{"line":49,"column":25}},"18":{"start":{"line":52,"column":8},"end":{"line":52,"column":27}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":29}},"20":{"start":{"line":58,"column":8},"end":{"line":58,"column":33}},"21":{"start":{"line":61,"column":8},"end":{"line":61,"column":33}},"22":{"start":{"line":64,"column":8},"end":{"line":64,"column":29}},"23":{"start":{"line":67,"column":8},"end":{"line":67,"column":27}},"24":{"start":{"line":70,"column":0},"end":{"line":70,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":72},"end":{"line":23,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":14},"end":{"line":26,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":15},"end":{"line":29,"column":5}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":16},"end":{"line":32,"column":5}},"line":30},"4":{"name":"(anonymous_4)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":18},"end":{"line":35,"column":5}},"line":33},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":18},"end":{"line":38,"column":5}},"line":36},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":16},"end":{"line":41,"column":5}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":15},"end":{"line":44,"column":5}},"line":42},"8":{"name":"(anonymous_8)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":14},"end":{"line":47,"column":5}},"line":45},"9":{"name":"(anonymous_9)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":18},"end":{"line":50,"column":5}},"line":48},"10":{"name":"(anonymous_10)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":20},"end":{"line":53,"column":5}},"line":51},"11":{"name":"(anonymous_11)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":22},"end":{"line":56,"column":5}},"line":54},"12":{"name":"(anonymous_12)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":26},"end":{"line":59,"column":5}},"line":57},"13":{"name":"(anonymous_13)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":26},"end":{"line":62,"column":5}},"line":60},"14":{"name":"(anonymous_14)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":22},"end":{"line":65,"column":5}},"line":63},"15":{"name":"(anonymous_15)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":20},"end":{"line":68,"column":5}},"line":66}},"branchMap":{},"s":{"0":1,"1":1,"2":7,"3":7,"4":7,"5":7,"6":7,"7":7,"8":7,"9":4,"10":13,"11":1,"12":110,"13":110,"14":110,"15":25,"16":110,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"f":{"0":7,"1":4,"2":13,"3":1,"4":110,"5":110,"6":110,"7":25,"8":110,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Food.ts","sources":["/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Food.ts"],"names":[],"mappings":";;;AAEA,MAAa,IAAI;IACf;;;;;;;;;OASG;IACH,YAAoB,IAAY,EAAU,KAAgB,EAAU,MAAc,EAAU,QAAgB,EAClG,QAAgB,EAAU,MAAc,EAAU,KAAa;QADrD,SAAI,GAAJ,IAAI,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAW;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAQ;QAClG,aAAQ,GAAR,QAAQ,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAQ;IAAE,CAAC;IAE5E,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;IAChE,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,QAAQ,CAAC,KAAgB;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF;AAzED,oBAyEC","sourcesContent":["type FoodGroup = \"Carne\" | \"Pescado\" | \"Moluscos\" |\"Huevos\" | \"Tofu\" | \"Frutos secos\" | \"Semillas\" | \"Legumbres\" | \"Verduras\" | \"Hortalizas\" | \"Leche\" | \"Quesos\" | \"Embutidos\" | \"Cereales\" | \"Frutas\" | \"Dulces\" | \"Grasa\"; \n\nexport class Food {\n  /**\n   * Clase Food que realiza la composición de un objeto que representará a un alimento (con los atributos aquí indicados)\n   * @param name Nombre del alimento\n   * @param group Grupo alimenticio\n   * @param origin Origen geográfico\n   * @param hydrates Hidratos de carbono\n   * @param proteins Proteinas\n   * @param lipids Lípidos\n   * @param price Precio por 1kg del alimento\n   */\n  constructor(private name: string, private group: FoodGroup, private origin: string, private hydrates: number, \n    private proteins: number, private lipids: number, private price: number){}\n  \n  getName() {\n    return this.name;\n  }\n\n  getGroup() {\n    return this.group;\n  }\n\n  getOrigin() {\n    return this.origin;\n  }\n\n  getHydrates() {\n    return this.hydrates;\n  }\n\n  getProteins() {\n    return this.proteins;\n  }\n\n  getLipids() {\n    return this.lipids;\n  }\n\n  getPrice() {\n    return this.price;\n  }\n\n  getKcal() {\n    return this.hydrates * 4 + this.proteins * 4 + this.lipids * 9\n  }\n\n  setName(name: string) {\n    this.name = name;\n  }\n\n  setGroup(group: FoodGroup) {\n    this.group = group;\n  }\n\n  setOrigin(origin: string) {\n    this.origin = origin;\n  }\n\n  setHydrates(hydrates: number) {\n    this.hydrates = hydrates;\n  }\n\n  setProteins(proteins: number) {\n    this.proteins = proteins;\n  }\n\n  setLipids(lipids: number) {\n    this.lipids = lipids;\n  }\n\n  setPrice(price: number) {\n    this.price = price;\n  }\n}\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"43ac19c0826ad4abfb904bcaaa692669d5bc6679","contentHash":"ba74e8a1718689413e22e3ae90d277a640fd6f722f63375f30685fc585da963a"},"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts":{"path":"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":25}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":25}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":33}},"5":{"start":{"line":21,"column":8},"end":{"line":21,"column":25}},"6":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":29}},"8":{"start":{"line":33,"column":18},"end":{"line":33,"column":20}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":22}},"10":{"start":{"line":35,"column":8},"end":{"line":35,"column":58}},"11":{"start":{"line":36,"column":8},"end":{"line":39,"column":9}},"12":{"start":{"line":37,"column":12},"end":{"line":37,"column":37}},"13":{"start":{"line":38,"column":12},"end":{"line":38,"column":24}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":43}},"15":{"start":{"line":41,"column":8},"end":{"line":41,"column":49}},"16":{"start":{"line":42,"column":8},"end":{"line":42,"column":32}},"17":{"start":{"line":43,"column":8},"end":{"line":43,"column":75}},"18":{"start":{"line":44,"column":8},"end":{"line":44,"column":22}},"19":{"start":{"line":56,"column":24},"end":{"line":56,"column":33}},"20":{"start":{"line":57,"column":24},"end":{"line":57,"column":25}},"21":{"start":{"line":58,"column":23},"end":{"line":58,"column":24}},"22":{"start":{"line":59,"column":22},"end":{"line":59,"column":23}},"23":{"start":{"line":60,"column":19},"end":{"line":60,"column":20}},"24":{"start":{"line":61,"column":8},"end":{"line":67,"column":9}},"25":{"start":{"line":62,"column":29},"end":{"line":62,"column":39}},"26":{"start":{"line":63,"column":12},"end":{"line":63,"column":70}},"27":{"start":{"line":64,"column":12},"end":{"line":64,"column":68}},"28":{"start":{"line":65,"column":12},"end":{"line":65,"column":64}},"29":{"start":{"line":66,"column":12},"end":{"line":66,"column":56}},"30":{"start":{"line":68,"column":8},"end":{"line":68,"column":44}},"31":{"start":{"line":69,"column":8},"end":{"line":69,"column":46}},"32":{"start":{"line":70,"column":8},"end":{"line":70,"column":42}},"33":{"start":{"line":71,"column":8},"end":{"line":71,"column":36}},"34":{"start":{"line":72,"column":8},"end":{"line":72,"column":25}},"35":{"start":{"line":78,"column":19},"end":{"line":78,"column":40}},"36":{"start":{"line":79,"column":8},"end":{"line":81,"column":9}},"37":{"start":{"line":80,"column":12},"end":{"line":80,"column":62}},"38":{"start":{"line":90,"column":24},"end":{"line":90,"column":25}},"39":{"start":{"line":91,"column":25},"end":{"line":91,"column":26}},"40":{"start":{"line":92,"column":25},"end":{"line":92,"column":26}},"41":{"start":{"line":93,"column":8},"end":{"line":97,"column":9}},"42":{"start":{"line":94,"column":12},"end":{"line":94,"column":40}},"43":{"start":{"line":95,"column":12},"end":{"line":95,"column":30}},"44":{"start":{"line":96,"column":12},"end":{"line":96,"column":58}},"45":{"start":{"line":98,"column":8},"end":{"line":98,"column":24}},"46":{"start":{"line":99,"column":8},"end":{"line":99,"column":26}},"47":{"start":{"line":107,"column":24},"end":{"line":107,"column":26}},"48":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"49":{"start":{"line":109,"column":12},"end":{"line":109,"column":44}},"50":{"start":{"line":111,"column":8},"end":{"line":111,"column":25}},"51":{"start":{"line":114,"column":0},"end":{"line":114,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":38},"end":{"line":19,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":14},"end":{"line":22,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":14},"end":{"line":25,"column":5}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":18},"end":{"line":28,"column":5}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":16},"end":{"line":45,"column":5}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":21},"end":{"line":73,"column":5}},"line":55},"6":{"name":"(anonymous_6)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":23},"end":{"line":82,"column":5}},"line":77},"7":{"name":"(anonymous_7)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":21},"end":{"line":100,"column":5}},"line":89},"8":{"name":"(anonymous_8)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":16},"end":{"line":112,"column":5}},"line":106}},"branchMap":{},"s":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":6,"6":1,"7":7,"8":1,"9":1,"10":1,"11":1,"12":3,"13":3,"14":1,"15":1,"16":1,"17":1,"18":1,"19":47,"20":47,"21":47,"22":47,"23":47,"24":47,"25":109,"26":109,"27":109,"28":109,"29":109,"30":47,"31":47,"32":47,"33":47,"34":47,"35":2,"36":2,"37":8,"38":10,"39":10,"40":10,"41":10,"42":24,"43":24,"44":24,"45":10,"46":10,"47":5,"48":5,"49":12,"50":5,"51":1},"f":{"0":5,"1":6,"2":1,"3":7,"4":1,"5":47,"6":2,"7":10,"8":5},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts","sources":["/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Plate.ts"],"names":[],"mappings":"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","sourcesContent":["import { Food } from './Food'\nimport * as food from './list_food'\nimport * as plates from './list_plates'\n\ntype Category = \"Entrante\" | \"Primer Plato\" | \"Segundo Plato\" | \"Postre\"\n\nexport class Plate {\n  /**\n   * Clase Plate, se encarga de crear los distintos platos (formados por las variables indicadas\n   * aquí) y de hacer los cálculos de cantidades y precios de cada uno de ellos.\n   * @param name Nombre del plato\n   * @param food Variable de tipo Map que almacena un objeto de tipo Food que contendrá los alimentos por los \n   * cuales esta formado el plato y un number que será la cantidad (en gramos) de cada uno de esos alimentos \n   * que utilizamos.\n   * @param category Tipo de plato al que nos referimos: entrante, primer plato... de un tipo de dato que contiene\n   * la información en distintas cadenas.\n   */\n  constructor(public name: string,  private food: Map<Food, number>, private category: Category) {\n  }\n  \n  getName() {\n    return this.name;\n  }\n  \n  getFood() {\n    return this.food;\n  }\n\n  getCategory() {\n    return this.category;\n  }\n\n  /**\n   * Método de impresion printFood(), se encarga de estructurar y escribir la información por pantalla de un plato.\n   */\n  printFood() {\n    let aux: string = \"\";\n    console.log();\n    console.log(\"Nombre del plato: \", this.getName());\n\n    for (let food of this.food) {\n      aux += food[0].getName();\n      aux += \"  \";\n    }\n    \n    console.log(\"Ingredientes: \", aux);\n    console.log(\"Información nutricional: \");\n    this.printNutritional();\n    console.log(\"Precio: \" + (this.priceGenerator()).toFixed(2) + \"€\");\n    console.log(); \n  }\n\n  /**\n   * Método getNutricional() encargado de adaptar los valores nutricionales del plato a la cantidad de cada alimento indicada.\n   * El método divide la cantidad indicada en gramos de cada alimento del plato por cien y lo almacena en un multiplicador (ya que los \n   * valores nutricionales indicados en el objeto Food se encuentran por hidratos de carbono, proteínas y lípidos por cada 100 gramos \n   * de nuestro alimento). Sumaremos estos valores nutricionales de todos los alimentos para obtener el valor total de cada uno, \n   * para esto multiplicaremos el valor nutricional correspondiente del alimento por nuestro multiplicador.\n   * @returns retorna un Map con el tipo de valor nutricional al que se refiera y un number con el total de ese valor nutricional\n   * de todos los alimentos del plato.\n   */\n  getNutritional() { \n    let resultado = new Map<string,number>()\n    let proteinas: number = 0;\n    let hidratos: number = 0;\n    let lípidos: number = 0;\n    let kcal: number = 0;\n    for (let i of this.food) {\n      let multiplier = i[1]/100;\n      proteinas = proteinas + (i[0].getProteins() * multiplier);\n      hidratos = hidratos + (i[0].getHydrates() * multiplier);\n      lípidos = lípidos + (i[0].getLipids() * multiplier);\n      kcal = kcal + (i[0].getKcal() * multiplier)\n    }\n    \n    resultado.set(\"Hidratos\",hidratos);\n    resultado.set(\"Proteinas\",proteinas);\n    resultado.set(\"Lípidos\",lípidos);\n    resultado.set(\"Kcal\", kcal)\n\n    return resultado;\n  }\n\n  /**\n   * Método printNutritional(), se encarga escribir la información por pantalla de los valores nutricionales de un plato.\n   */\n  printNutritional() {\n    let info = this.getNutritional()\n    for(let i of info) {\n      console.log(\"  \" + i[0] + \": \" + i[1].toFixed(2))\n    }\n  }\n  \n  /**\n   * Método priceGenerator() recoge el precio de cada uno de los alimentos (que se encuentra en €/kg) y realizaremos una\n   * comparación con el peso del alimento que se utilizara para el plato, multiplicando este por el precio del alimento por kilogramo\n   * y dividiendo este entre mil (para corresponderlo con los gramos, que es la unidad en la que se encuentra el peso de los alimentos)\n   * @returns devuelve el precio total del plato.\n   */\n  priceGenerator() { //calcular el precio del plato según los alimentos que tenga y su proporcion\n    let price1000: number = 0;\n    let foodWeight: number = 0;\n    let totalPrice: number = 0;\n\n    for (let i of this.food) {\n      price1000 = i[0].getPrice();\n      foodWeight = i[1];\n      totalPrice += (foodWeight * price1000)/1000\n    }\n\n    totalPrice += 2; //Precio por mano de obra\n\n    return totalPrice\n  }\n\n  /**\n   * Método getGroups() que se encarga de buscar en los platos los tipos de alimentos que tenemos para almacenarlos en un \n   * vector de cadenas.\n   * @returns devuelve un vector de string con los tipos de alimentos hallados en nuestro plato.\n   */\n  getGroups() {\n    let resultado: string[] = []\n    for (let i of this.food){\n      resultado.push(i[0].getGroup())\n    }\n    return resultado\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b27ffcdee13448ff993bb0ef392ab2fa846bd5ec","contentHash":"ad95d6e850e2da92eadbf7b2b044eab7253f8323071ed0a305350aec61adb746"},"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Menu.ts":{"path":"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Menu.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":9,"column":8},"end":{"line":9,"column":25}},"3":{"start":{"line":10,"column":8},"end":{"line":10,"column":33}},"4":{"start":{"line":11,"column":8},"end":{"line":11,"column":39}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":41}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":29}},"7":{"start":{"line":14,"column":8},"end":{"line":21,"column":9}},"8":{"start":{"line":15,"column":12},"end":{"line":19,"column":13}},"9":{"start":{"line":16,"column":16},"end":{"line":18,"column":17}},"10":{"start":{"line":17,"column":20},"end":{"line":17,"column":73}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":113}},"12":{"start":{"line":28,"column":8},"end":{"line":28,"column":283}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":22}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":173}},"15":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"16":{"start":{"line":37,"column":12},"end":{"line":37,"column":64}},"17":{"start":{"line":39,"column":8},"end":{"line":39,"column":51}},"18":{"start":{"line":40,"column":19},"end":{"line":40,"column":40}},"19":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"20":{"start":{"line":42,"column":12},"end":{"line":42,"column":64}},"21":{"start":{"line":44,"column":8},"end":{"line":44,"column":69}},"22":{"start":{"line":45,"column":8},"end":{"line":45,"column":22}},"23":{"start":{"line":52,"column":8},"end":{"line":52,"column":163}},"24":{"start":{"line":59,"column":24},"end":{"line":59,"column":33}},"25":{"start":{"line":60,"column":24},"end":{"line":60,"column":25}},"26":{"start":{"line":61,"column":23},"end":{"line":61,"column":24}},"27":{"start":{"line":62,"column":22},"end":{"line":62,"column":23}},"28":{"start":{"line":63,"column":19},"end":{"line":63,"column":20}},"29":{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},"30":{"start":{"line":65,"column":12},"end":{"line":65,"column":227}},"31":{"start":{"line":66,"column":12},"end":{"line":66,"column":222}},"32":{"start":{"line":67,"column":12},"end":{"line":67,"column":217}},"33":{"start":{"line":68,"column":12},"end":{"line":68,"column":202}},"34":{"start":{"line":71,"column":12},"end":{"line":71,"column":179}},"35":{"start":{"line":72,"column":12},"end":{"line":72,"column":175}},"36":{"start":{"line":73,"column":12},"end":{"line":73,"column":171}},"37":{"start":{"line":74,"column":12},"end":{"line":74,"column":159}},"38":{"start":{"line":76,"column":8},"end":{"line":76,"column":44}},"39":{"start":{"line":77,"column":8},"end":{"line":77,"column":46}},"40":{"start":{"line":78,"column":8},"end":{"line":78,"column":42}},"41":{"start":{"line":79,"column":8},"end":{"line":79,"column":36}},"42":{"start":{"line":80,"column":8},"end":{"line":80,"column":25}},"43":{"start":{"line":86,"column":8},"end":{"line":86,"column":209}},"44":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"45":{"start":{"line":88,"column":12},"end":{"line":88,"column":64}},"46":{"start":{"line":92,"column":0},"end":{"line":92,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":67},"end":{"line":22,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":15},"end":{"line":29,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":16},"end":{"line":46,"column":5}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":16},"end":{"line":53,"column":5}},"line":51},"4":{"name":"(anonymous_4)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":21},"end":{"line":81,"column":5}},"line":58},"5":{"name":"(anonymous_5)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":22},"end":{"line":90,"column":5}},"line":85}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":21,"column":9}},{"start":{"line":14,"column":8},"end":{"line":21,"column":9}}],"line":14},"1":{"loc":{"start":{"line":14,"column":12},"end":{"line":14,"column":144}},"type":"binary-expr","locations":[{"start":{"line":14,"column":12},"end":{"line":14,"column":48}},{"start":{"line":14,"column":52},"end":{"line":14,"column":95}},{"start":{"line":14,"column":99},"end":{"line":14,"column":144}}],"line":14},"2":{"loc":{"start":{"line":15,"column":12},"end":{"line":19,"column":13}},"type":"if","locations":[{"start":{"line":15,"column":12},"end":{"line":19,"column":13}},{"start":{"line":15,"column":12},"end":{"line":19,"column":13}}],"line":15},"3":{"loc":{"start":{"line":16,"column":16},"end":{"line":18,"column":17}},"type":"if","locations":[{"start":{"line":16,"column":16},"end":{"line":18,"column":17}},{"start":{"line":16,"column":16},"end":{"line":18,"column":17}}],"line":16},"4":{"loc":{"start":{"line":28,"column":15},"end":{"line":28,"column":282}},"type":"cond-expr","locations":[{"start":{"line":28,"column":42},"end":{"line":28,"column":176}},{"start":{"line":28,"column":179},"end":{"line":28,"column":282}}],"line":28},"5":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"6":{"loc":{"start":{"line":52,"column":15},"end":{"line":52,"column":162}},"type":"cond-expr","locations":[{"start":{"line":52,"column":42},"end":{"line":52,"column":107}},{"start":{"line":52,"column":110},"end":{"line":52,"column":162}}],"line":52},"7":{"loc":{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},{"start":{"line":64,"column":8},"end":{"line":75,"column":9}}],"line":64},"8":{"loc":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},{"start":{"line":87,"column":8},"end":{"line":89,"column":9}}],"line":87}},"s":{"0":1,"1":1,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":0,"9":0,"10":0,"11":0,"12":2,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":4,"21":1,"22":1,"23":1,"24":3,"25":3,"26":3,"27":3,"28":3,"29":3,"30":2,"31":2,"32":2,"33":2,"34":1,"35":1,"36":1,"37":1,"38":3,"39":3,"40":3,"41":3,"42":3,"43":1,"44":1,"45":1,"46":1},"f":{"0":2,"1":2,"2":1,"3":1,"4":3,"5":1},"b":{"0":[0,2],"1":[2,2,2],"2":[0,0],"3":[0,0],"4":[2,0],"5":[1,0],"6":[1,0],"7":[2,1],"8":[1,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Menu.ts","sources":["/home/usuario/prct07/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-g/src/Menu.ts"],"names":[],"mappings":"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","sourcesContent":["import { Food } from './Food'\nimport {Plate} from './Plate'\n\n\nexport class Menu {\n  /**\n   * Constructor de la clase Menú, que representa un Menu, mediante un nombre, y un plato de cada categoría. El menú puede tener o no un postre.\n   */\n  constructor(public name: string, private entrante: Plate, private primerPlato: Plate, private segundoPlato: Plate, private postre?: Plate){\n    if (entrante.getCategory() != 'Entrante' || primerPlato.getCategory() != 'Primer Plato' || segundoPlato.getCategory() != 'Segundo Plato') {\n      if (postre != undefined) {\n        if (postre.getCategory() != 'Postre') {\n          throw 'El postre no se corresponde con su categoría'\n        }\n      }\n    throw 'Se tiene que añadir un entrante, primer plato, segundo plato, obligatoriamente en ese orden.'\n    }\n  }\n\n  /**\n   * Método que devuelve el precio total de menú\n   * @returns Precio de menú\n   */\n  getPrice() {\n    return this.postre != undefined ? this.entrante.priceGenerator() + this.primerPlato.priceGenerator() + this.segundoPlato.priceGenerator() + this.postre.priceGenerator() : this.entrante.priceGenerator() + this.primerPlato.priceGenerator() + this.segundoPlato.priceGenerator()\n  }\n\n  /**\n   * Imprime el menú\n   */\n  printMenu() { \n    console.log();\n    console.log(`${this.name}:\\n  Entrante: ${this.entrante.getName()}\\n  Primer Plato: ${this.primerPlato.getName()}\\n  Segundo Plato: ${this.segundoPlato.getName()}`)\n    if (this.postre != undefined) {\n      console.log(`  Postre: ${this.postre.getName()}\\n`)\n    }\n    console.log(\"  Información nutricional: \")\n    let info = this.getNutritional()\n    for(let i of info) {\n      console.log(\"    \" + i[0] + \": \" + i[1].toFixed(2))\n    }\n    console.log(\"  Precio: \" + this.getPrice().toFixed(2) + \"€\")\n    console.log();\n  }\n\n  /**\n   * Método que devuelve todos los platos del menú en un array.\n   * @returns Array con los platos del menú.\n   */\n  getPlates() {\n    return this.postre != undefined ? [this.entrante, this.primerPlato, this.segundoPlato, this.postre] : [this.entrante, this.primerPlato, this.segundoPlato]\n  }\n\n  /**\n   * Método que devuelve la información nutricional de todo el menú en un Map.\n   * @returns Map con toda la información nutricional.\n   */\n  getNutritional() {\n    let resultado = new Map<string,number>()\n    let proteinas: number = 0;\n    let hidratos: number = 0;\n    let lípidos: number = 0;\n    let kcal: number = 0;\n\n    if (this.postre != undefined) {\n      proteinas = this.entrante.getNutritional().get('Proteinas') + this.primerPlato.getNutritional().get('Proteinas') + this.segundoPlato.getNutritional().get('Proteinas') + this.postre.getNutritional().get('Proteinas')\n      hidratos = this.entrante.getNutritional().get('Hidratos') + this.primerPlato.getNutritional().get('Hidratos') + this.segundoPlato.getNutritional().get('Hidratos') + this.postre.getNutritional().get('Hidratos')\n      lípidos = this.entrante.getNutritional().get('Lípidos') + this.primerPlato.getNutritional().get('Lípidos') + this.segundoPlato.getNutritional().get('Lípidos') + this.postre.getNutritional().get('Lípidos')\n      kcal = this.entrante.getNutritional().get('Kcal') + this.primerPlato.getNutritional().get('Kcal') + this.segundoPlato.getNutritional().get('Kcal') + this.postre.getNutritional().get('Kcal')\n    }\n    else {\n      proteinas = this.entrante.getNutritional().get('Proteinas') + this.primerPlato.getNutritional().get('Proteinas') + this.segundoPlato.getNutritional().get('Proteinas')\n      hidratos = this.entrante.getNutritional().get('Hidratos') + this.primerPlato.getNutritional().get('Hidratos') + this.segundoPlato.getNutritional().get('Hidratos')\n      lípidos = this.entrante.getNutritional().get('Lípidos') + this.primerPlato.getNutritional().get('Lípidos') + this.segundoPlato.getNutritional().get('Lípidos')\n      kcal = this.entrante.getNutritional().get('Kcal') + this.primerPlato.getNutritional().get('Kcal') + this.segundoPlato.getNutritional().get('Kcal')\n    }\n\n    resultado.set(\"Hidratos\", hidratos)\n    resultado.set(\"Proteínas\", proteinas)\n    resultado.set(\"Lípidos\", lípidos)\n    resultado.set(\"Kcal\",kcal)\n\n    return resultado\n  }\n  /**\n   * Imprime las categorías de los alimentos de cada plato.\n   */\n  printCategories(){\n    console.log(`Categorías de los alimentos en cada plato: \\n  Entrante: ${this.entrante.getGroups()}\\n  Primer Plato: ${this.primerPlato.getGroups()}\\n  Segundo Plato: ${this.segundoPlato.getGroups()}`)\n    if (this.postre != undefined) {\n      console.log(`  Postre: ${this.postre.getGroups()}`)\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"08be79600658c48cfefc9e336e040af85159483b","contentHash":"3a6355c2d021c92890d92e996682d0705dca66170059a0599499ca94e51b58d4"}}